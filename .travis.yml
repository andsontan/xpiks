sudo: required
dist: trusty

language: cpp

os:
  - linux

compiler:
  - gcc

git:
  depth: 3

env:
  - XPIKS_BINARY=binary
  - CORE_TESTS=tests QT_FATAL_WARNINGS=true
  - INTEGRATION_TESTS=tests QT_FATAL_WARNINGS=true

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - gcc-5
    - g++-5

before_install:
  - wget https://github.com/hunspell/hunspell/archive/v1.6.0.tar.gz -O /tmp/hunspell.tar.gz
  - sudo add-apt-repository ppa:beineri/opt-qt551 -y
  - sudo add-apt-repository ppa:kubuntu-ppa/backports -y
  - sudo apt-get update -qq

install:
  - sudo apt-get install -qq qt55base; source /opt/qt55/bin/qt55-env.sh
  - sudo apt-get install qt55base qt55quickcontrols qt55svg qt55declarative libcurl4-openssl-dev hunspell-en-us zlib1g-dev libimage-exiftool-perl libavcodec-dev libavformat-dev libavfilter-dev libavutil-dev libswscale-dev
  - sudo apt-get install -y gdb
  - sudo apt-get install -y libexiv2-dev expat
  - sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-5 /usr/bin/g++
  - if [ "$CXX" = "g++" ]; then export CXX="g++-5" CC="gcc-5"; fi

before_script:
  - export COMPILER=g++-5
  - g++ --version
  - ulimit -c unlimited -S       # enable core dumps

script:
  - cd vendors/
  - tar xzf /tmp/hunspell.tar.gz
  - cd hunspell/
  - qmake "CONFIG+=debug" hunspell.pro
  - make
  - cp libhunspell.a ../../libs/
  - cd ../
  - cd quazip/quazip/
  - qmake "CONFIG+=debug" quazip.pro
  - make
  - cp libquazip.so.1.0.0 ../../../libs/
  - cd ../../../libs
  - ln -s libquazip.so.1.0.0 libquazip.so
  - ln -s libquazip.so.1.0.0 libquazip.so.1
  - ln -s libquazip.so.1.0.0 libquazip.so.1.0
  - cd ../vendors/
  - mv tiny-aes/aes.c tiny-aes/aes.cpp
  - cd cpp-libface
  - make lib-face
  - cp libface.a ../../libs/
  - cd ../
  - cd ssdll/src/ssdll
  - qmake "CONFIG+=debug" ssdll.pro
  - make
  - cp libssdll.so.1.0.0 ../../../../libs/
  - cd ../../../../libs
  - ln -s libssdll.so.1.0.0 libssdll.so
  - ln -s libssdll.so.1.0.0 libssdll.so.1
  - ln -s libssdll.so.1.0.0 libssdll.so.1.0
  - cd ../vendors/libavthumbnailer/src/libavthumbnailer
  - qmake "CONFIG+=debug" libavthumbnailer.pro
  - make
  - cp libavthumbnailer.so.1.0.0 ../../../libs
  - cd ../../../libs/
  - ln -s libavthumbnailer.so.1.0.0 libavthumbnailer.so
  - ln -s libavthumbnailer.so.1.0.0 libavthumbnailer.so.1
  - ln -s libavthumbnailer.so.1.0.0 libavthumbnailer.so.1.0
  - cd ../src
  - ls -la ../libs/
  - if [ -n "$XPIKS_BINARY" ]; then cd xpiks-qt/; fi
  - if [ -n "$CORE_TESTS" ]; then cd xpiks-tests/xpiks-tests-core; fi
  - if [ -n "$INTEGRATION_TESTS" ]; then cd xpiks-tests/xpiks-tests-integration; fi
  - if [ -n "$XPIKS_BINARY" ]; then qmake "CONFIG+= debug travis-ci" xpiks-qt.pro; fi
  - if [ -n "$CORE_TESTS" ]; then qmake "CONFIG+=debug travis-ci" xpiks-tests-core.pro; fi
  - if [ -n "$INTEGRATION_TESTS" ]; then qmake "CONFIG+=debug travis-ci" xpiks-tests-integration.pro; fi
  - make
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../../../libs/
  - if [ -n "$CORE_TESTS" ]; then ./xpiks-tests-core; fi
  - if [ -n "$INTEGRATION_TESTS" ]; then ./xpiks-tests-integration; fi

after_failure:
  - if [ -n "$CORE_TESTS" ]; then for i in $(find ./ -maxdepth 1 -name 'core*' -print); do gdb $(pwd)/xpiks-tests-core core* -ex "thread apply all bt" -ex "set pagination 0" -batch; done; fi
  - if [ -n "$INTEGRATION_TESTS" ]; then for i in $(find ./ -maxdepth 1 -name 'core*' -print); do gdb $(pwd)/xpiks-tests-integration core* -ex "thread apply all bt" -ex "set pagination 0" -batch; done; fi
